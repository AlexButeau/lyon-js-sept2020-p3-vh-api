swagger: '2.0'
info:
  version: '1.0.0'
  title: 'Hypnose et Vins API'
  description: 'API to manage Hypnose et Vins website'
host: 'localhost:5000'
basePath: '/'
consumes:
  - 'application/json'
produces:
  - 'application/json'
tags:
- name: 'Users route'
  description: 'Operations on users'
paths:
  /users:
    get:
      tags:
        - 'Users route'
      summary: 'Get a list of users'
      responses:
        '200':
          description: 'Everything went well'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/User'
    post:
      tags:
        - 'Users route'
      summary: 'Create a new user'
      parameters: 
        - in: 'body'
          name: 'user'
          description: 'User informations that need to be created'
          required: true
          schema:
            allOf:
              - $ref: '#/definitions/NewUser'
              - type: 'object'
                required:
                  - 'email' 
                  - 'firstname'
                  - 'lastname'
                  - 'password'
                  - 'password_confirmation'
      responses:
        '201':
          description: 'Everything went well'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/UserAllFields'
        '422':
          description: 'Invalid input. The user object provided is not valid'
          schema:
            type: 'object'
            $ref: "#/definitions/ValidationError"
        '401':
          description: 'Internal servor error'
        '400':
          description: 'User object was not provided'
  /users/{userId}:
    get:
      tags:
        - 'Users route'
      summary: 'Find an user by ID'
      description: 'Returns a single user'
      parameters:
        - name: 'userId'
          in: 'path'
          description: 'ID of user to return'
          required: true
          type: 'integer'
          format: 'int64'
          schema:
            allOf:
              - $ref: '#/definitions/NewUser'
              - type: 'object'
                required:
      responses:
        '200':
          description: 'successful operation'
          schema:
            type: 'object'
            $ref: '#/definitions/UserAllFields'

        '404':
          description: 'User not found'
          schema:
            type: 'object'
            $ref: '#/definitions/RecordNotFoundError'
    put:
      tags:
        - 'Users route'
      summary: 'Update an existing user'
      parameters:
        - name: 'userId'
          in: 'path'
          description: 'ID of user to update'
          required: true
          type: 'integer'
          format: 'int64'
        - in: 'body'
          name: 'user'
          schema:
            allOf:
              - $ref: '#/definitions/NewUser'
              - type: 'object'
      responses:
        '200':
          description: 'User updated'
          schema:
            type: 'object'
            $ref: '#/definitions/UserAllFields'

        '404':
          description: 'User not found'
          schema:
            type: 'object'
            $ref: '#/definitions/RecordNotFoundError'
        '400':
          description: 'User object was not provided'
        '422':
          description: 'Invalid input. The contact object provided is not valid'
          schema:
            type: 'object'
            $ref: "#/definitions/ValidationError"
    delete:
      tags:
        - 'Users route'
      summary: 'Delete an existing user'
      parameters:
        - name: 'userId'
          in: 'path'
          description: 'ID user to delete'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        '204':
          description: 'User succefully deleted'
        '404':
          description: 'User not found'
definitions:
  ValidationError:
    type: 'object'
    properties: 
      errorsByField: 
        type: 'array'
        items: 
          type: 'object'
          properties: 
            type:
              type: "string"
            path:
              type: 'array'
              items: 
                type: 'string'
            message:
              type: 'string'
      errorMessage:
        type: 'string'
  RecordNotFoundError:
    type: 'object'
    properties: 
      errorMessage:
        type: "string"
      collection:
        type: "string"
      id:
        type: "string"
  User:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      email:
        type: 'string'
        example: 'john.doe@gmail.com'
        format: 'email'
  NewUser:
    type: 'object'
    properties:
      firstname:
        type: 'string'
        example: 'John'
      lastname:
        type: 'string'
        example: 'Doe'
      email:
        type: 'string'
        example: 'john.doe@gmail.com'
        format: 'email'
      password:
        type: 'string'
        format: 'password'
        example: '12345678'
      password_confirmation:
        type: 'string'
        format: 'password'
        example: '12345678'
      phone_number:
        type: 'string'
        example: '0612345678'
      bio:
        type: 'string'
        example: "I'm John Doe from Texas"
      role:
        type: 'string'
        example: 'moderator'
      photo_url:
        type: 'string'
        format: 'url'
        example: 'https://randomuser.me/api/portraits/men/59.jpg'
      website_url:
        type: 'string'
        format: 'url'
        example: 'https://randomuser.me/'
      facebook_url:
        type: 'string'
        format: 'url'
        example: 'www.facebook.fr'
      twitter_url:
        type: 'string'
        format: 'url'
        example: 'www.twitter.fr'
      instagram_url:
        type: 'string'
        format: 'url'
        example: 'www.instagram.fr'
  UserAllFields:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      firstname:
        type: 'string'
        example: 'John'
      lastname:
        type: 'string'
        example: 'Doe'
      email:
        type: 'string'
        example: 'john.doe@gmail.com'
        format: 'email'
      phone_number:
        type: 'string'
        example: '0612345678'
        nullable: true
      bio:
        type: 'string'
        example: "I'm John Doe from Texas"
        nullable: true
      role:
        type: 'string'
        example: 'moderator'
        nullable: true
      photo_url:
        type: 'string'
        format: 'url'
        example: 'https://randomuser.me/api/portraits/men/59.jpg'
        nullable: true
      website_url:
        type: 'string'
        format: 'url'
        example: 'https://randomuser.me/'
        nullable: true
      facebook_url:
        type: 'string'
        format: 'url'
        example: 'www.facebook.fr'
        nullable: true
      twitter_url:
        type: 'string'
        format: 'url'
        example: 'www.twitter.fr'
        nullable: true
      instagram_url:
        type: 'string'
        format: 'url'
        example: 'www.instagram.fr'
        nullable: true